# lab guide reading

//做这个lab的感悟 , 只要慢慢做 ,刚开始觉得难的问题都会解决掉 , 在最后完成的一刻感受到真正的喜悦
//就跟着test case一个一个过 , 过程还是挺煎熬的, 稍微难的问题反馈都不及时,容易消磨掉耐心
//远大的目标也一样 , 总之,基础核心架构组我来了

find relation between vars , reduce matainence of vars
find a right model to reduce matinence complexity



职责: 从 byteStream 转换成 tcp segment (ip/udp datagram)

整体思考模型: 和 receiver 一样,窗口,往窗口里填字节流

干脆也以字节流的方式进行ack和重传吧? 而不是segment , 但是处理起来好像比较复杂

```
• Keep track of the receiver’s window (processing incoming acknos and window sizes)

• Fill the window when possible, by reading from the ByteStream, creating new TCP
segments (including SYN and FIN flags if needed), and sending them

• Keep track of which segments have been sent but not yet acknowledged by the receiver—
we call these “outstanding” segments

• Re-send outstanding segments if enough time passes since they were sent, and they
haven’t been acknowledged yet

```

```
?Why am I doing this? The basic principle is to send whatever the receiver will allow
us to send (filling the window), and keep retransmitting until the receiver acknowledges
each segment. This is called “automatic repeat request” (ARQ). The sender divides the
byte stream up into segments and sends them, as much as the receiver’s window allows.
Thanks to your work last week, we know that the remote TCP receiver can reconstruct
the byte stream as long as it receives each index-tagged byte at least once—no matter
the order. The sender’s job is to make sure the receiver gets each byte at least once.
```

```

It’s important to remember that the receiver can be any implementation of a valid TCP receiver—it
won’t necessarily be your own TCPReceiver. One of the valuable things about Internet standards is how
they establish a common language between endpoints that may otherwise act very differently.
```

```
looking through its collection of outstanding
TCPSegments and deciding if the oldest-sent segment has been outstanding for too long
without acknowledgment (that is, without all of its sequence numbers being acknowledged).
If so, it needs to be retransmitted (sent again).
```

```
_initial_retransmission_timeout

需要实现一个 retransimission timer 计时器

有个 tick method, 利用好

Every time a segment containing data (nonzero length in sequence space) is sent
(whether it’s the first time or a retransmission), if the timer is not running, start it
running so that it will expire after RTO milliseconds (for the current value of RTO).
5. When all outstanding data has been acknowledged, turn off the retransmission timer.

看 RFC

```
# test case reading

全定义为闭区间 , 初始化ackedWindow大小为0 , ackedleft=0 , ackedright=-1
初始化unAckLeft=0 , unAckRight=-1



property 

synced , fined

nextSeqno ,  //下一个要被发出去的字节的seqno

segMap ,  

his_window_size //对方的window_size

ackedWindowLeft,
ackedWindowRight,

unAckWindowRight,
unAckWindowLeft ,


                        unacked
ackedLeft          acked        unacked
[                                      ]
//整理窗口之间的关系 , 减少变量维护压力
ackedLeft永远为初始值 , 即isn
ackedRight在收到ack之后作出变动 , 取ackno和最大的一个期待的ackno的最小值
unackedLeft = ackedRight+1 , 动态生成不需要维护
unackedRight在首次发出segment之后根据发出的字节数维护 , syn和fin也要算1位


# 重传策略思路整理

记录上一次ack的时间,  用一个双端队列存储segment ,

当有ack到的时候, 循环peek seqno最小的一个 , 如果segment的payload全部acked了 , 则pop_out,
然后
重置time_out= initial_value
timer_base=now()
consecutive_count=0


然后是tick , 如果timer_base + time_out>= now , 并且还没有被ack 则重传, 并且把
timeout*2 ,
consecutive_count+=1;
timer_base = now()

# 考虑抽离出timer的逻辑



# 目前的模型

一个窗口 , 一个timer , 一个未ack的segment有序队列


//统一以isn为基准的64位index
func init()
    nextSeqno = isn
    //his_window_size = 1 //窗口在syn的ack了之后再初始化吧
   ackedWindowLeft = isn
   ackedWindowRight = -1
   unAckLeft=0
   unAckWindowRight = -1
    


func fill_window()
if (!synced)
    segment.syn = true
    segment.seqno = nextSeqno
    nextSeqno++;
    segment_out.push(seg);
    unAckWindowRight++
    synced=true;
    expectAckno = nextSeqno;
    segmap[expectAckno] = pair<segment,nowTime>
if (!fined && stream_in.input_ended())
//minSize = min(in.size,his_window_size - bytes_in_flight())
//if minSize!=0
    segment.fin = true
    segment.seqno = nextSeqno
    nextSeqno++;
    withPayload() //复制下面的逻辑
    segment_out.push(seg);
    unAckWindowRight++
    fined=true;
    expectAckno = nextSeqno;
    segmap[expectAckno] = pair<segment,nowTime>

    
if (stream_in.size>0 and his_window_size>0)
    minSize = min(in.size,his_window_size - bytes_in_flight())
    segment.data = stream_in.pop_output(minSize)
    expectAckno = nextSeqno = nextSeqno+minSize-1+1
    timeout = TIMEOUT_DFLT
    segMap[expectAckno] = pair<segment,nowTime,timeout> //doubted , 用于超时重传
    segment_out.push(seg)
    unackedRight +=minSize


func ack_received(ackno,win_size)

if (ackno>=nextSeqno)
    foreach(segMap as seg)
        if seg.expectAckno < ackno
            del(segMap[ackno])
    
    ackedWindowRight = min(unackWindowRight,ackno-1)
    window_size = win_size
    unAckedWindowLeft
    
    
    return true;    
else
    return false

   
//窗口里未被ack的字节数 , fin也算一个seqno !!
func bytes_in_flight()
//闭区间
    return unAckWindowRight - unAckWindowLeft +1;

//deciding if the oldest-sent segment has been outstanding for too long
  without acknowledgment
  //好像每次tick只重传最久的一个seg
  //Retransmit the earliest (lowest sequence number) segment that hasn’t been fully
    acknowledged
func tick(ms_since_last_tick)
    foreach (segmap as k=>seg)
        sendTime = seg.second
        //超出时间窗口,触发重传
        if sendTime+ms_since_last_tick >=sendTime+ seg.third
            segment_out.push(seg.first)
            //exponential back-off
            seg.third = 2*seg.third
            seg.second = now()
            segmap[k] = seg


//连续重传的次数 , 是指一个seg还是多个seg , 如何定义"连续" , 看下guide

//If the window size is nonzero: //为什么要有这个window_size判断
  i. Keep track of the number of consecutive retransmissions, and increment it
  because you just retransmitted something. Your TCPConnection will use this
  information to decide if the connection is hopeless (too many consecutive
  retransmissions in a row) and needs to be aborted.
  ii. Double the value of RTO.3

func consecutive_retransmissions()
    return consecutive_count;

//生成空payload segment
func send_empty_segment()

